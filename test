// Script file for testing

GLOBAL = 5 + 5;

function create_int_array(hook, size) {
    _ = 100000;
    return hook.createArray(_.getClass(), size);
}

function create_string_array(hook, size) {
    _ = "";
    return hook.createArray(_.getClass(), size);
}

function fibbonacci(hook, count) {
    n1 = 0;
    n2 = 1;
    n3 = 0;

    // Printing 0 and 1
    hook.out.println(n1);
    hook.out.println(n2);

    // Loop starts from 2 because 0 and 1 are already printed
    for (i = 2; i < count; i++) {
        n3 = n1 + n2;
        hook.out.println(n3);
        n1 = n2;
        n2 = n3;
    }
}

function factorial_i(n) {
    rv = 1;
    while (n != 1) {
        rv *= n--;
    }
    return rv;
}

function factorial_r(n) {
    if (n == 1) return 1;
    else return n * factorial_i(--n);
}

function number_to_string(n) {
    if (n == 1) {
        return "one";
    } else if (n == 2) {
        return "two";
    } else if (n == 3) {
        return "three";
    } else {
        return "four";
    }
}

function sleep(hook, time) {
    sleepTime = 0;
    hook.thread.sleep(time);
    hook.out.println("Slept for " + time + " ms");
}

function test_flow_control(hook) {
    return;
    hook.out.println("No");
}

function main(hook) {
    out = hook.out;
    out.println(GLOBAL + " is in the global context");
    v = ("a" + "b").toString();
    out.println(v);

    n = 5;
    out.println("Iterative factorial of " + n + " equals " + factorial_i(n));
    out.println("Recursive factorial of " + n + " equals " + factorial_r(n));

    array = create_string_array(hook, 10);
    array[0] = "Array Element";
    out.println(array[0]);
}
